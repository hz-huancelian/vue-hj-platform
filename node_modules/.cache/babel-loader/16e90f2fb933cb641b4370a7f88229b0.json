{"remainingRequest":"F:\\webstormProjects\\vue-hj-platform\\node_modules\\babel-loader\\lib\\index.js!F:\\webstormProjects\\vue-hj-platform\\node_modules\\eslint-loader\\index.js??ref--13-0!F:\\webstormProjects\\vue-hj-platform\\src\\permission.js","dependencies":[{"path":"F:\\webstormProjects\\vue-hj-platform\\src\\permission.js","mtime":1637214064000},{"path":"F:\\webstormProjects\\vue-hj-platform\\babel.config.js","mtime":1637214064000},{"path":"F:\\webstormProjects\\vue-hj-platform\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\webstormProjects\\vue-hj-platform\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"F:\\webstormProjects\\vue-hj-platform\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"F:\\\\webstormProjects\\\\vue-hj-platform\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\interopRequireDefault.js\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"F:\\\\webstormProjects\\\\vue-hj-platform\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\objectSpread2.js\"));\n\nrequire(\"regenerator-runtime/runtime\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"F:\\\\webstormProjects\\\\vue-hj-platform\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\"));\n\nvar _router = _interopRequireDefault(require(\"./router\"));\n\nvar _store = _interopRequireDefault(require(\"./store\"));\n\nvar _elementUi = require(\"element-ui\");\n\nvar _nprogress = _interopRequireDefault(require(\"nprogress\"));\n\nrequire(\"nprogress/nprogress.css\");\n\nvar _auth = require(\"@/utils/auth\");\n\nvar _getPageTitle = _interopRequireDefault(require(\"@/utils/get-page-title\"));\n\n_nprogress.default.configure({\n  showSpinner: false\n});\n\nvar whiteList = ['/login', '/auth-redirect']; // 路由守卫功能实现\n\n_router.default.beforeEach( /*#__PURE__*/function () {\n  var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee(to, from, next) {\n    var hasToken, hasRoles;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // 开始进度块\n            _nprogress.default.start(); // 设置页面头\n\n\n            document.title = (0, _getPageTitle.default)(to.meta.title); // 判断当前是否登录\n\n            hasToken = (0, _auth.getToken)();\n\n            if (!hasToken) {\n              _context.next = 30;\n              break;\n            }\n\n            if (!(to.path === '/login')) {\n              _context.next = 9;\n              break;\n            }\n\n            // 已经登录过了 直接跳转首页\n            next({\n              path: '/'\n            });\n\n            _nprogress.default.done();\n\n            _context.next = 28;\n            break;\n\n          case 9:\n            hasRoles = _store.default.getters.roles && _store.default.getters.roles.length > 0;\n\n            if (!hasRoles) {\n              _context.next = 14;\n              break;\n            }\n\n            next();\n            _context.next = 28;\n            break;\n\n          case 14:\n            if (!(_store.default.getters.roles.length === 0)) {\n              _context.next = 27;\n              break;\n            }\n\n            _context.prev = 15;\n\n            // 判断当前用户是否已拉取完user_info信息\n            _store.default.dispatch('user/getInfo').then(function () {\n              _store.default.dispatch('GenerateRoutes').then(function (accessRoutes) {\n                // 根据roles权限生成可访问的路由表\n                _router.default.addRoutes(accessRoutes); // 动态添加可访问路由表\n\n\n                next((0, _objectSpread2.default)((0, _objectSpread2.default)({}, to), {}, {\n                  replace: true\n                })); // hack方法 确保addRoutes已完成\n              }).catch(function () {\n                _store.default.dispatch('user/logout').then(function () {\n                  // Message.error(error)\n                  next({\n                    path: '/login'\n                  });\n\n                  _nprogress.default.done();\n                });\n              });\n            }).catch(function () {\n              _store.default.dispatch('user/resetToken').then(function () {\n                next({\n                  path: '/login'\n                });\n              });\n\n              _nprogress.default.done();\n            });\n\n            _context.next = 25;\n            break;\n\n          case 19:\n            _context.prev = 19;\n            _context.t0 = _context[\"catch\"](15);\n            _context.next = 23;\n            return _store.default.dispatch('user/resetToken');\n\n          case 23:\n            // Message.error(error || '服务器信息获取失败')\n            next(\"/login\");\n\n            _nprogress.default.done();\n\n          case 25:\n            _context.next = 28;\n            break;\n\n          case 27:\n            next();\n\n          case 28:\n            _context.next = 31;\n            break;\n\n          case 30:\n            // 没有token信息\n            if (whiteList.indexOf(to.path) !== -1) {\n              // 白名单界面放行\n              next();\n            } else {\n              // 非白名单界面 跳转到登录\n              next(\"/login\");\n\n              _nprogress.default.done();\n            }\n\n          case 31:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[15, 19]]);\n  }));\n\n  return function (_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}());\n\n_router.default.afterEach(function () {\n  // 关闭进度块\n  _nprogress.default.done();\n});",{"version":3,"sources":["F:/webstormProjects/vue-hj-platform/src/permission.js"],"names":["NProgress","configure","showSpinner","whiteList","router","beforeEach","to","from","next","start","document","title","meta","hasToken","path","done","hasRoles","store","getters","roles","length","dispatch","then","accessRoutes","addRoutes","replace","catch","indexOf","afterEach"],"mappings":";;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEAA,mBAAUC,SAAV,CAAoB;AAAEC,EAAAA,WAAW,EAAE;AAAf,CAApB;;AAEA,IAAMC,SAAS,GAAG,CAAC,QAAD,EAAW,gBAAX,CAAlB,C,CAEA;;AACAC,gBAAOC,UAAP;AAAA,mFAAkB,iBAAMC,EAAN,EAAUC,IAAV,EAAgBC,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAChB;AACAR,+BAAUS,KAAV,GAFgB,CAGhB;;;AACAC,YAAAA,QAAQ,CAACC,KAAT,GAAiB,2BAAaL,EAAE,CAACM,IAAH,CAAQD,KAArB,CAAjB,CAJgB,CAKhB;;AACME,YAAAA,QANU,GAMC,qBAND;;AAAA,iBAOZA,QAPY;AAAA;AAAA;AAAA;;AAAA,kBAQVP,EAAE,CAACQ,IAAH,KAAY,QARF;AAAA;AAAA;AAAA;;AASZ;AACAN,YAAAA,IAAI,CAAC;AAAEM,cAAAA,IAAI,EAAE;AAAR,aAAD,CAAJ;;AACAd,+BAAUe,IAAV;;AAXY;AAAA;;AAAA;AAaNC,YAAAA,QAbM,GAaKC,eAAMC,OAAN,CAAcC,KAAd,IAAuBF,eAAMC,OAAN,CAAcC,KAAd,CAAoBC,MAApB,GAA6B,CAbzD;;AAAA,iBAcRJ,QAdQ;AAAA;AAAA;AAAA;;AAeVR,YAAAA,IAAI;AAfM;AAAA;;AAAA;AAAA,kBAiBNS,eAAMC,OAAN,CAAcC,KAAd,CAAoBC,MAApB,KAA+B,CAjBzB;AAAA;AAAA;AAAA;;AAAA;;AAmBN;AACAH,2BAAMI,QAAN,CAAe,cAAf,EAA+BC,IAA/B,CAAoC,YAAM;AACxCL,6BAAMI,QAAN,CAAe,gBAAf,EAAiCC,IAAjC,CAAsC,UAAAC,YAAY,EAAI;AACtD;AACEnB,gCAAOoB,SAAP,CAAiBD,YAAjB,EAFoD,CAErB;;;AAC/Bf,gBAAAA,IAAI,6DAAMF,EAAN;AAAUmB,kBAAAA,OAAO,EAAE;AAAnB,mBAAJ,CAHoD,CAGrB;AAChC,eAJD,EAIGC,KAJH,CAIS,YAAM;AACbT,+BAAMI,QAAN,CAAe,aAAf,EAA8BC,IAA9B,CAAmC,YAAM;AACvC;AACAd,kBAAAA,IAAI,CAAC;AAAEM,oBAAAA,IAAI,EAAE;AAAR,mBAAD,CAAJ;;AACAd,qCAAUe,IAAV;AACD,iBAJD;AAKD,eAVD;AAWD,aAZD,EAYGW,KAZH,CAYS,YAAM;AACbT,6BAAMI,QAAN,CAAe,iBAAf,EAAkCC,IAAlC,CAAuC,YAAM;AAC3Cd,gBAAAA,IAAI,CAAC;AAAEM,kBAAAA,IAAI,EAAE;AAAR,iBAAD,CAAJ;AACD,eAFD;;AAGAd,iCAAUe,IAAV;AACD,aAjBD;;AApBM;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,mBAuCAE,eAAMI,QAAN,CAAe,iBAAf,CAvCA;;AAAA;AAwCN;AACAb,YAAAA,IAAI,UAAJ;;AACAR,+BAAUe,IAAV;;AA1CM;AAAA;AAAA;;AAAA;AA6CRP,YAAAA,IAAI;;AA7CI;AAAA;AAAA;;AAAA;AAgEd;AACA,gBAAIL,SAAS,CAACwB,OAAV,CAAkBrB,EAAE,CAACQ,IAArB,MAA+B,CAAC,CAApC,EAAuC;AACrC;AACAN,cAAAA,IAAI;AACL,aAHD,MAGO;AACL;AACAA,cAAAA,IAAI,UAAJ;;AACAR,iCAAUe,IAAV;AACD;;AAxEa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlB;;AAAA;AAAA;AAAA;AAAA;;AA4EAX,gBAAOwB,SAAP,CAAiB,YAAM;AACrB;AACA5B,qBAAUe,IAAV;AACD,CAHD","sourcesContent":["import router from './router'\nimport store from './store'\nimport { Message } from 'element-ui'\nimport NProgress from 'nprogress'\nimport 'nprogress/nprogress.css'\nimport { getToken } from '@/utils/auth'\nimport getPageTitle from '@/utils/get-page-title'\n\nNProgress.configure({ showSpinner: false })\n\nconst whiteList = ['/login', '/auth-redirect']\n\n// 路由守卫功能实现\nrouter.beforeEach(async(to, from, next) => {\n  // 开始进度块\n  NProgress.start()\n  // 设置页面头\n  document.title = getPageTitle(to.meta.title)\n  // 判断当前是否登录\n  const hasToken = getToken()\n  if (hasToken) {\n    if (to.path === '/login') {\n      // 已经登录过了 直接跳转首页\n      next({ path: '/' })\n      NProgress.done()\n    } else {\n      const hasRoles = store.getters.roles && store.getters.roles.length > 0\n      if (hasRoles) {\n        next()\n      } else {\n        if (store.getters.roles.length === 0) {\n          try {\n            // 判断当前用户是否已拉取完user_info信息\n            store.dispatch('user/getInfo').then(() => {\n              store.dispatch('GenerateRoutes').then(accessRoutes => {\n              // 根据roles权限生成可访问的路由表\n                router.addRoutes(accessRoutes) // 动态添加可访问路由表\n                next({ ...to, replace: true }) // hack方法 确保addRoutes已完成\n              }).catch(() => {\n                store.dispatch('user/logout').then(() => {\n                  // Message.error(error)\n                  next({ path: '/login' })\n                  NProgress.done()\n                })\n              })\n            }).catch(() => {\n              store.dispatch('user/resetToken').then(() => {\n                next({ path: '/login' })\n              })\n              NProgress.done()\n            })\n          } catch (error) {\n            await store.dispatch('user/resetToken')\n            // Message.error(error || '服务器信息获取失败')\n            next(`/login`)\n            NProgress.done()\n          }\n        } else {\n          next()\n        }\n\n        // try {\n        //   // 个人信息获取 -- 接口请求获取权限\n        //   const { roles, userType } = await store.dispatch('user/getInfo')\n        //   // 获取路由列表\n        //   const accessRoutes = await store.dispatch('generateRoutes_old', userType === '0' ? ['admin'] : roles)\n        //   router.addRoutes(accessRoutes)\n        //   next({ ...to, replace: true })\n        // } catch (error) {\n        //   await store.dispatch('user/resetToken')\n        //   Message.error(error || '服务器信息获取失败')\n        //   next(`/login`)\n        //   NProgress.done()\n        // }\n      }\n    }\n  } else {\n    // 没有token信息\n    if (whiteList.indexOf(to.path) !== -1) {\n      // 白名单界面放行\n      next()\n    } else {\n      // 非白名单界面 跳转到登录\n      next(`/login`)\n      NProgress.done()\n    }\n  }\n})\n\nrouter.afterEach(() => {\n  // 关闭进度块\n  NProgress.done()\n})\n"]}]}