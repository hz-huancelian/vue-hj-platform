{"remainingRequest":"F:\\webstormProjects\\vue-hj-platform\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\webstormProjects\\vue-hj-platform\\src\\layout\\components\\Sidebar\\Item.vue?vue&type=script&lang=js&","dependencies":[{"path":"F:\\webstormProjects\\vue-hj-platform\\src\\layout\\components\\Sidebar\\Item.vue","mtime":1637214064000},{"path":"F:\\webstormProjects\\vue-hj-platform\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\webstormProjects\\vue-hj-platform\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"F:\\webstormProjects\\vue-hj-platform\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\webstormProjects\\vue-hj-platform\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\nexport default {\n  name: 'MenuItem',\n  functional: true,\n  props: {\n    icon: {\n      type: String,\n      default: ''\n    },\n    title: {\n      type: String,\n      default: ''\n    }\n  },\n  render(h, context) {\n    const { icon, title } = context.props\n    const vnodes = []\n    if (icon && icon !== '#') {\n      if (icon.includes('el-icon')) {\n        vnodes.push(<i class={[icon, 'sub-el-icon']} />)\n      } else {\n        vnodes.push(<svg-icon icon-class={icon} />)\n      }\n      if (title) {\n        vnodes.push(<span slot='title'>{(title)}</span>)\n      }\n    } else {\n      if (title) {\n        vnodes.push(<span slot='title' style='padding-left:10px;'>{(title)}</span>)\n      }\n    }\n    return vnodes\n  }\n}\n",{"version":3,"sources":["Item.vue"],"names":[],"mappings":";AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Item.vue","sourceRoot":"src/layout/components/Sidebar","sourcesContent":["<script>\nexport default {\n  name: 'MenuItem',\n  functional: true,\n  props: {\n    icon: {\n      type: String,\n      default: ''\n    },\n    title: {\n      type: String,\n      default: ''\n    }\n  },\n  render(h, context) {\n    const { icon, title } = context.props\n    const vnodes = []\n    if (icon && icon !== '#') {\n      if (icon.includes('el-icon')) {\n        vnodes.push(<i class={[icon, 'sub-el-icon']} />)\n      } else {\n        vnodes.push(<svg-icon icon-class={icon} />)\n      }\n      if (title) {\n        vnodes.push(<span slot='title'>{(title)}</span>)\n      }\n    } else {\n      if (title) {\n        vnodes.push(<span slot='title' style='padding-left:10px;'>{(title)}</span>)\n      }\n    }\n    return vnodes\n  }\n}\n</script>\n<style scoped>\n.sub-el-icon {\n  color: currentColor;\n  width: 1em;\n  height: 1em;\n}\n</style>\n"]}]}