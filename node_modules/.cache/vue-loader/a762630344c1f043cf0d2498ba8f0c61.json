{"remainingRequest":"F:\\webstormProjects\\vue-hj-platform\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\webstormProjects\\vue-hj-platform\\src\\views\\dashboard\\components\\SamllBoxChart.vue?vue&type=script&lang=js&","dependencies":[{"path":"F:\\webstormProjects\\vue-hj-platform\\src\\views\\dashboard\\components\\SamllBoxChart.vue","mtime":1640244040000},{"path":"F:\\webstormProjects\\vue-hj-platform\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\webstormProjects\\vue-hj-platform\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"F:\\webstormProjects\\vue-hj-platform\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\webstormProjects\\vue-hj-platform\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n\nimport echarts from 'echarts'\nrequire('echarts/theme/macarons') // echarts theme\nimport resize from './mixins/resize'\n\nexport default {\n  mixins: [resize],\n  props: {\n    chartForm: {\n      type: Object,\n      default() {\n        return {\n          xNameData: [],\n          xValData: []\n        }\n      }\n    },\n    className: {\n      type: String,\n      default: 'chart'\n    },\n    width: {\n      type: String,\n      default: '100%'\n    },\n    height: {\n      type: String,\n      default: '270px'\n    },\n    boxName: {\n      type: String,\n      default: ''\n    }\n  },\n  watch: {\n    chartForm: {\n      deep: true,\n      handler(val) {\n        this.setOption(val)\n      }\n    }\n  },\n  mounted() {\n    this.$nextTick(() => {\n      this.initChart()\n    })\n  },\n  beforeDestroy() {\n    if (!this.chart) {\n      return\n    }\n    this.chart.dispose()\n    this.chart = null\n  },\n  methods: {\n    initChart() {\n      this.chart = echarts.init(document.getElementById('smallBoxChart' + this.boxName))\n      this.setOption(this.chartForm)\n    },\n    setOption({ xNameData, xValData, inv } = {}) {\n      this.chart.setOption({\n        tooltip: {\n          show: true,\n          backgroundColor: '#fff',\n          borderColor: '#ddd',\n          borderWidth: 1,\n          textStyle: {\n            color: '#3c3c3c',\n            fontSize: 16\n          },\n          formatter: function(p) {\n            return (\n              '完成：' +\n                p.value +\n                '<br>'\n            )\n          },\n          extraCssText: 'box-shadow: 0 0 5px rgba(0, 0, 0, 0.1)'\n        },\n        grid: {\n          containLabel: true,\n          top: 0,\n          left: 0,\n          right: 15,\n          bottom: 30\n        },\n        xAxis: {\n          show: false,\n          type: 'value',\n          inverse: inv, // 使横向柱状图靠右侧y轴显示\n          splitLine: {\n            show: false\n          },\n          max: function(value) {\n            return value.max * 1.2\n          },\n          axisLine: {\n            lineStyle: {\n              color: '#000'\n            }\n          },\n          axisLabel: {\n            color: '#000'\n          }\n        },\n        yAxis: [{\n          type: 'category',\n          position: inv ? 'right' : 'left',\n          axisLabel: {\n            fontSize: 12,\n            color: '#000'\n          },\n          axisLine: {\n            show: false\n          },\n          axisTick: {\n            show: false\n          },\n          splitLine: {\n            show: false\n          },\n          data: xNameData\n        }],\n        series: [\n          {\n            name: '数值',\n            stack: '2',\n            legendHoverLink: false,\n            type: 'bar',\n            barWidth: 28,\n            zlevel: 1,\n            itemStyle: {\n              normal: {\n                barBorderRadius: !inv ? [0, 7, 7, 0] : [7, 0, 0, 7],\n                color: new echarts.graphic.LinearGradient(\n                  0,\n                  0,\n                  1,\n                  1,\n                  [\n                    {\n                      offset: 0,\n                      color: inv ? '#1782FB' : '#fff'\n                    },\n                    {\n                      offset: 1,\n                      color: inv ? '#fff' : '#1782FB'\n                    }\n                  ],\n                  false\n                ),\n                label: {\n                  show: true,\n                  color: '#000',\n                  position: !inv ? 'right' : 'left',\n                  formatter: function(p) {\n                    return p.value > 0 ? p.value : ''\n                  }\n                }\n              }\n            },\n            data: xValData\n          }\n        ]\n      })\n    }\n  }\n}\n",{"version":3,"sources":["SamllBoxChart.vue"],"names":[],"mappings":";;;;;AAKA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"SamllBoxChart.vue","sourceRoot":"src/views/dashboard/components","sourcesContent":["<template>\n  <div :id=\"'smallBoxChart' + boxName\" :class=\"className\" :style=\"{height:height,width:width}\" />\n</template>\n\n<script>\nimport echarts from 'echarts'\nrequire('echarts/theme/macarons') // echarts theme\nimport resize from './mixins/resize'\n\nexport default {\n  mixins: [resize],\n  props: {\n    chartForm: {\n      type: Object,\n      default() {\n        return {\n          xNameData: [],\n          xValData: []\n        }\n      }\n    },\n    className: {\n      type: String,\n      default: 'chart'\n    },\n    width: {\n      type: String,\n      default: '100%'\n    },\n    height: {\n      type: String,\n      default: '270px'\n    },\n    boxName: {\n      type: String,\n      default: ''\n    }\n  },\n  watch: {\n    chartForm: {\n      deep: true,\n      handler(val) {\n        this.setOption(val)\n      }\n    }\n  },\n  mounted() {\n    this.$nextTick(() => {\n      this.initChart()\n    })\n  },\n  beforeDestroy() {\n    if (!this.chart) {\n      return\n    }\n    this.chart.dispose()\n    this.chart = null\n  },\n  methods: {\n    initChart() {\n      this.chart = echarts.init(document.getElementById('smallBoxChart' + this.boxName))\n      this.setOption(this.chartForm)\n    },\n    setOption({ xNameData, xValData, inv } = {}) {\n      this.chart.setOption({\n        tooltip: {\n          show: true,\n          backgroundColor: '#fff',\n          borderColor: '#ddd',\n          borderWidth: 1,\n          textStyle: {\n            color: '#3c3c3c',\n            fontSize: 16\n          },\n          formatter: function(p) {\n            return (\n              '完成：' +\n                p.value +\n                '<br>'\n            )\n          },\n          extraCssText: 'box-shadow: 0 0 5px rgba(0, 0, 0, 0.1)'\n        },\n        grid: {\n          containLabel: true,\n          top: 0,\n          left: 0,\n          right: 15,\n          bottom: 30\n        },\n        xAxis: {\n          show: false,\n          type: 'value',\n          inverse: inv, // 使横向柱状图靠右侧y轴显示\n          splitLine: {\n            show: false\n          },\n          max: function(value) {\n            return value.max * 1.2\n          },\n          axisLine: {\n            lineStyle: {\n              color: '#000'\n            }\n          },\n          axisLabel: {\n            color: '#000'\n          }\n        },\n        yAxis: [{\n          type: 'category',\n          position: inv ? 'right' : 'left',\n          axisLabel: {\n            fontSize: 12,\n            color: '#000'\n          },\n          axisLine: {\n            show: false\n          },\n          axisTick: {\n            show: false\n          },\n          splitLine: {\n            show: false\n          },\n          data: xNameData\n        }],\n        series: [\n          {\n            name: '数值',\n            stack: '2',\n            legendHoverLink: false,\n            type: 'bar',\n            barWidth: 28,\n            zlevel: 1,\n            itemStyle: {\n              normal: {\n                barBorderRadius: !inv ? [0, 7, 7, 0] : [7, 0, 0, 7],\n                color: new echarts.graphic.LinearGradient(\n                  0,\n                  0,\n                  1,\n                  1,\n                  [\n                    {\n                      offset: 0,\n                      color: inv ? '#1782FB' : '#fff'\n                    },\n                    {\n                      offset: 1,\n                      color: inv ? '#fff' : '#1782FB'\n                    }\n                  ],\n                  false\n                ),\n                label: {\n                  show: true,\n                  color: '#000',\n                  position: !inv ? 'right' : 'left',\n                  formatter: function(p) {\n                    return p.value > 0 ? p.value : ''\n                  }\n                }\n              }\n            },\n            data: xValData\n          }\n        ]\n      })\n    }\n  }\n}\n</script>\n<style lang=\"scss\" scoped>\n.clearfix {\n  line-height: 50px;\n  padding-left: 15px;\n}\n</style>\n"]}]}