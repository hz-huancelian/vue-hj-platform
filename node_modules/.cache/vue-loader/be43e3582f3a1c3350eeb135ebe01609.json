{"remainingRequest":"F:\\webstormProjects\\vue-hj-platform\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\webstormProjects\\vue-hj-platform\\src\\views\\dashboard\\components\\OnlyLineChart.vue?vue&type=script&lang=js&","dependencies":[{"path":"F:\\webstormProjects\\vue-hj-platform\\src\\views\\dashboard\\components\\OnlyLineChart.vue","mtime":1639537890000},{"path":"F:\\webstormProjects\\vue-hj-platform\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\webstormProjects\\vue-hj-platform\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"F:\\webstormProjects\\vue-hj-platform\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\webstormProjects\\vue-hj-platform\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n\nimport echarts from 'echarts'\nrequire('echarts/theme/macarons') // echarts theme\nimport resize from './mixins/resize'\n\nexport default {\n  mixins: [resize],\n  props: {\n    className: {\n      type: String,\n      default: 'chart'\n    },\n    width: {\n      type: String,\n      default: '100%'\n    },\n    height: {\n      type: String,\n      default: '350px'\n    },\n    autoResize: {\n      type: Boolean,\n      default: true\n    },\n    chartData: {\n      type: Object,\n      required: true\n    }\n  },\n  data() {\n    return {\n      chart: null\n    }\n  },\n  watch: {\n    chartData: {\n      deep: true,\n      handler(val) {\n        this.setOptions(val)\n      }\n    }\n  },\n  mounted() {\n    this.$nextTick(() => {\n      this.initChart()\n    })\n  },\n  beforeDestroy() {\n    if (!this.chart) {\n      return\n    }\n    this.chart.dispose()\n    this.chart = null\n  },\n  methods: {\n    initChart() {\n      this.chart = echarts.init(this.$el, 'macarons')\n      this.setOptions(this.chartData)\n    },\n    setOptions({ xNameData, title, xTitle, xValData } = {}) {\n      const color = [\n        '#99CCCC',\n        '#36CE9E',\n        '#FFC005',\n        '#FF515A',\n        '#8B5CFF',\n        '#00CA69'\n      ]\n      this.chart.setOption({\n        tile: '1',\n        legend: {\n          right: 10,\n          top: 10\n        },\n        tooltip: {\n        },\n        grid: {\n          top: 50,\n          left: 10,\n          right: 10,\n          containLabel: true\n        },\n        xAxis: [{\n          type: 'category',\n          // boundaryGap: false,\n          axisLabel: {\n            formatter: '{value}',\n            textStyle: {\n              color: '#333'\n            }\n          },\n          axisLine: {\n            lineStyle: {\n              color: '#D9D9D9'\n            }\n          },\n          data: xNameData\n        }],\n        yAxis: [{\n          type: 'value',\n          axisLabel: {\n            textStyle: {\n              color: '#666'\n            }\n          },\n          nameTextStyle: {\n            color: '#666',\n            fontSize: 12,\n            lineHeight: 40\n          },\n          splitLine: {\n            lineStyle: {\n              type: 'dashed',\n              color: '#E9E9E9'\n            }\n          },\n          axisLine: {\n            show: false\n          },\n          axisTick: {\n            show: false\n          }\n        }],\n        series: [{\n          name: xTitle,\n          type: 'line',\n          smooth: true,\n          symbolSize: 8,\n          zlevel: 3,\n          label: {\n            show: true,\n            formatter: (params) => {\n              return `${params.value}` + ''\n            },\n            textStyle: { fontSize: 16, color: color[4] }\n          },\n          areaStyle: {\n            normal: {\n              color: new echarts.graphic.LinearGradient(\n                0,\n                0,\n                0,\n                1,\n                [{\n                  offset: 0,\n                  color: color[0]\n                },\n                {\n                  offset: 1,\n                  color: color[0]\n                }\n                ],\n                false\n              )\n            }\n          },\n          data: xValData\n        }]\n      })\n    }\n  }\n}\n",{"version":3,"sources":["OnlyLineChart.vue"],"names":[],"mappings":";;;;;AAKA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"OnlyLineChart.vue","sourceRoot":"src/views/dashboard/components","sourcesContent":["<template>\n  <div :class=\"className\" :style=\"{height:height,width:width}\" />\n</template>\n\n<script>\nimport echarts from 'echarts'\nrequire('echarts/theme/macarons') // echarts theme\nimport resize from './mixins/resize'\n\nexport default {\n  mixins: [resize],\n  props: {\n    className: {\n      type: String,\n      default: 'chart'\n    },\n    width: {\n      type: String,\n      default: '100%'\n    },\n    height: {\n      type: String,\n      default: '350px'\n    },\n    autoResize: {\n      type: Boolean,\n      default: true\n    },\n    chartData: {\n      type: Object,\n      required: true\n    }\n  },\n  data() {\n    return {\n      chart: null\n    }\n  },\n  watch: {\n    chartData: {\n      deep: true,\n      handler(val) {\n        this.setOptions(val)\n      }\n    }\n  },\n  mounted() {\n    this.$nextTick(() => {\n      this.initChart()\n    })\n  },\n  beforeDestroy() {\n    if (!this.chart) {\n      return\n    }\n    this.chart.dispose()\n    this.chart = null\n  },\n  methods: {\n    initChart() {\n      this.chart = echarts.init(this.$el, 'macarons')\n      this.setOptions(this.chartData)\n    },\n    setOptions({ xNameData, title, xTitle, xValData } = {}) {\n      const color = [\n        '#99CCCC',\n        '#36CE9E',\n        '#FFC005',\n        '#FF515A',\n        '#8B5CFF',\n        '#00CA69'\n      ]\n      this.chart.setOption({\n        tile: '1',\n        legend: {\n          right: 10,\n          top: 10\n        },\n        tooltip: {\n        },\n        grid: {\n          top: 50,\n          left: 10,\n          right: 10,\n          containLabel: true\n        },\n        xAxis: [{\n          type: 'category',\n          // boundaryGap: false,\n          axisLabel: {\n            formatter: '{value}',\n            textStyle: {\n              color: '#333'\n            }\n          },\n          axisLine: {\n            lineStyle: {\n              color: '#D9D9D9'\n            }\n          },\n          data: xNameData\n        }],\n        yAxis: [{\n          type: 'value',\n          axisLabel: {\n            textStyle: {\n              color: '#666'\n            }\n          },\n          nameTextStyle: {\n            color: '#666',\n            fontSize: 12,\n            lineHeight: 40\n          },\n          splitLine: {\n            lineStyle: {\n              type: 'dashed',\n              color: '#E9E9E9'\n            }\n          },\n          axisLine: {\n            show: false\n          },\n          axisTick: {\n            show: false\n          }\n        }],\n        series: [{\n          name: xTitle,\n          type: 'line',\n          smooth: true,\n          symbolSize: 8,\n          zlevel: 3,\n          label: {\n            show: true,\n            formatter: (params) => {\n              return `${params.value}` + ''\n            },\n            textStyle: { fontSize: 16, color: color[4] }\n          },\n          areaStyle: {\n            normal: {\n              color: new echarts.graphic.LinearGradient(\n                0,\n                0,\n                0,\n                1,\n                [{\n                  offset: 0,\n                  color: color[0]\n                },\n                {\n                  offset: 1,\n                  color: color[0]\n                }\n                ],\n                false\n              )\n            }\n          },\n          data: xValData\n        }]\n      })\n    }\n  }\n}\n</script>\n"]}]}