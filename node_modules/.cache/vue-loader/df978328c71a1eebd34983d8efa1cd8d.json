{"remainingRequest":"F:\\webstormProjects\\vue-hj-platform\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\webstormProjects\\vue-hj-platform\\src\\views\\system\\role\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"F:\\webstormProjects\\vue-hj-platform\\src\\views\\system\\role\\index.vue","mtime":1639466945000},{"path":"F:\\webstormProjects\\vue-hj-platform\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\webstormProjects\\vue-hj-platform\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"F:\\webstormProjects\\vue-hj-platform\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\webstormProjects\\vue-hj-platform\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { listRole, getRole, delRole, addRole, updateRole, exportRole, dataScope, changeRoleStatus } from '@/api/system/role'\nimport { menuTreeselect, roleMenuTreeselect } from '@/api/system/menu'\n// import { roleMenuTreeselect } from '@/api/system/dept'\n\nimport Pagination from '@/components/Pagination' // Secondary package based on el-pagination\nconst ROLE_STATUS = {\n  '0': '正常',\n  '1': '停用'\n}\nconst AUTH_STATUS = {\n  '1': '所有数据权限',\n  // '2': '本部门数据权限',\n  '3': '本部门及以下数据权限',\n  '4': '仅本人数据权限'\n}\nexport default {\n  name: 'Role',\n  components: { Pagination },\n  data() {\n    return {\n      ROLE_STATUS,\n      AUTH_STATUS,\n      // 遮罩层\n      loading: true,\n      // 导出遮罩层\n      exportLoading: false,\n      // 选中数组\n      ids: [],\n      // 非单个禁用\n      single: true,\n      // 非多个禁用\n      multiple: true,\n      // 显示搜索条件\n      showSearch: true,\n      // 总条数\n      total: 0,\n      // 角色表格数据\n      roleList: [],\n      // 弹出层标题\n      title: '',\n      // 是否显示弹出层\n      open: false,\n      // 是否显示弹出层（数据权限）\n      openDataScope: false,\n      menuNodeAll: false,\n\n      // 菜单列表\n      menuOptions: [],\n      // 部门列表\n      deptOptions: [],\n      // 选择控制\n      menuCheckStrictly: true,\n      // 查询参数\n      queryParams: {\n        pageNumber: 1,\n        pageSize: 20,\n        roleName: '',\n        roleKey: '',\n        status: ''\n      },\n      // 表单参数\n      form: {},\n      defaultProps: {\n        children: 'children',\n        label: 'label'\n      },\n      // 表单校验\n      rules: {\n        roleName: [\n          { required: true, message: '角色名称不能为空', trigger: 'blur' }\n        ],\n        roleKey: [\n          { required: true, message: '权限字符不能为空', trigger: 'blur' }\n        ],\n        roleSort: [\n          { required: true, message: '角色顺序不能为空', trigger: 'blur' }\n        ]\n      }\n    }\n  },\n  created() {\n    this.getList()\n  },\n  methods: {\n    /** 查询角色列表 */\n    getList() {\n      this.loading = true\n      listRole(this.queryParams).then(\n        response => {\n          this.roleList = response.result.records || []\n          this.total = response.result.total\n          this.loading = false\n        }\n      ).catch(() => {\n        this.loading = false\n      })\n    },\n    /** 查询菜单树结构 */\n    getMenuTreeselect() {\n      menuTreeselect().then(response => {\n        this.menuOptions = response.result\n      })\n    },\n    /** 查询部门树结构 */\n    getDeptTreeselect() {\n      // deptTreeselect().then(response => {\n      //   this.deptOptions = response.data\n      // })\n    },\n    // 所有菜单节点数据\n    getMenuAllCheckedKeys() {\n      // 目前被选中的菜单节点\n      const checkedKeys = this.$refs.menu.getCheckedKeys()\n      // 半选中的菜单节点\n      const halfCheckedKeys = this.$refs.menu.getHalfCheckedKeys()\n      checkedKeys.unshift.apply(checkedKeys, halfCheckedKeys)\n      return checkedKeys\n    },\n    // 所有部门节点数据\n    getDeptAllCheckedKeys() {\n      // 目前被选中的部门节点\n      const checkedKeys = this.$refs.dept.getCheckedKeys()\n      // 半选中的部门节点\n      const halfCheckedKeys = this.$refs.dept.getHalfCheckedKeys()\n      checkedKeys.unshift.apply(checkedKeys, halfCheckedKeys)\n      return checkedKeys\n    },\n    /** 根据角色ID查询菜单树结构 */\n    getRoleMenuTreeselect(roleId) {\n      return roleMenuTreeselect(roleId).then(response => {\n        this.menuOptions = response.result.treeSelect\n        return response.result\n      })\n    },\n    /** 根据角色ID查询部门树结构 */\n    getRoleDeptTreeselect(roleId) {\n      // return roleDeptTreeselect(roleId).then(response => {\n      //   this.deptOptions = response.depts\n      //   return response\n      // })\n    },\n    // 角色状态修改\n    handleStatusChange(row) {\n      const text = row.status === '0' ? '启用' : '停用'\n      this.$confirm('确认要\"' + text + '\"\"' + row.roleName + '\"角色吗?', '警告', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(function() {\n        return changeRoleStatus(row.roleId, row.status)\n      }).then(() => {\n        this.msgSuccess(text + '成功')\n      }).catch(function() {\n        row.status = row.status === '0' ? '1' : '0'\n      })\n    },\n    // 取消按钮\n    cancel() {\n      this.open = false\n      this.reset()\n    },\n    // 取消按钮（数据权限）\n    cancelDataScope() {\n      this.openDataScope = false\n      this.reset()\n    },\n    // 表单重置\n    reset() {\n      if (this.$refs.menu !== undefined) {\n        this.$refs.menu.setCheckedKeys([])\n      }\n      this.menuNodeAll = false\n      this.form = {\n        roleId: undefined,\n        roleName: '',\n        roleKey: '',\n        roleSort: 0,\n        status: '0',\n        menuIds: [],\n        dataScope: '',\n        remark: ''\n      }\n      this.resetForm('form')\n    },\n    /** 搜索按钮操作 */\n    handleQuery() {\n      this.queryParams.pageNumber = 1\n      this.getList()\n    },\n    /** 重置按钮操作 */\n    resetQuery() {\n      this.dateRange = []\n      this.resetForm('queryForm')\n      this.handleQuery()\n    },\n    // 多选框选中数据\n    handleSelectionChange(selection) {\n      this.ids = selection.map(item => item.roleId)\n      this.single = selection.length !== 1\n      this.multiple = !selection.length\n    },\n    // 更多操作触发\n    handleCommand(command, row) {\n      switch (command) {\n        case 'handleDataScope':\n          this.handleDataScope(row)\n          break\n        case 'handleAuthUser':\n          this.handleAuthUser(row)\n          break\n        default:\n          break\n      }\n    },\n    // 树权限（展开/折叠）\n    handleCheckedTreeExpand(value, type) {\n      if (type === 'menu') {\n        const treeList = this.menuOptions\n        for (let i = 0; i < treeList.length; i++) {\n          this.$refs.menu.store.nodesMap[treeList[i].id].expanded = value\n        }\n      } else if (type === 'dept') {\n        const treeList = this.deptOptions\n        for (let i = 0; i < treeList.length; i++) {\n          this.$refs.dept.store.nodesMap[treeList[i].id].expanded = value\n        }\n      }\n    },\n    // 树权限（全选/全不选）\n    handleCheckedTreeNodeAll(value, type) {\n      if (type === 'menu') {\n        this.$refs.menu.setCheckedNodes(value ? this.menuOptions : [])\n      } else if (type === 'dept') {\n        this.$refs.dept.setCheckedNodes(value ? this.deptOptions : [])\n      }\n    },\n    // 树权限（父子联动）\n    handleCheckedTreeConnect(value, type) {\n      this.menuCheckStrictly = !!value\n    },\n    /** 新增按钮操作 */\n    handleAdd() {\n      this.reset()\n      this.getMenuTreeselect()\n      this.open = true\n      this.title = '添加角色'\n    },\n    /** 修改按钮操作 */\n    handleUpdate(row) {\n      this.reset()\n      const roleId = row.roleId || this.ids\n      const roleMenu = this.getRoleMenuTreeselect(roleId)\n      getRole(roleId).then(response => {\n        this.form = response.result\n        this.$delete(this.form, 'createTime')\n        this.$delete(this.form, 'updateTime')\n        this.$delete(this.form, 'delFlag')\n        this.open = true\n        this.$nextTick(() => {\n          roleMenu.then(res => {\n            const checkedKeys = res.checkedKeys\n            checkedKeys.forEach((v) => {\n              this.$nextTick(() => {\n                this.$refs.menu.setChecked(v, true, false)\n              })\n            })\n          })\n        })\n        this.title = '修改角色'\n      })\n    },\n    /** 选择角色权限范围触发 */\n    dataScopeSelectChange(value) {\n      if (value !== '2') {\n        this.$refs.dept.setCheckedKeys([])\n      }\n    },\n    /** 分配数据权限操作 */\n    handleDataScope(row) {\n      this.reset()\n      const roleDeptTreeselect = this.getRoleDeptTreeselect(row.roleId)\n      getRole(row.roleId).then(response => {\n        this.form = response.data\n        this.openDataScope = true\n        this.$nextTick(() => {\n          roleDeptTreeselect.then(res => {\n            this.$refs.dept.setCheckedKeys(res.checkedKeys)\n          })\n        })\n        this.title = '分配数据权限'\n      })\n    },\n    /** 分配用户操作 */\n    handleAuthUser: function(row) {\n      const roleId = row.roleId\n      this.$router.push('/auth/user/' + roleId)\n    },\n    /** 提交按钮 */\n    submitForm: function() {\n      this.$refs['form'].validate(valid => {\n        if (valid) {\n          if (this.form.roleId !== undefined) {\n            this.form.menuIds = this.getMenuAllCheckedKeys()\n            updateRole(this.form).then(response => {\n              this.msgSuccess('修改成功')\n              this.open = false\n              this.getList()\n            })\n          } else {\n            this.form.menuIds = this.getMenuAllCheckedKeys()\n            addRole(this.form).then(response => {\n              this.msgSuccess('新增成功')\n              this.open = false\n              this.getList()\n            })\n          }\n        }\n      })\n    },\n    /** 提交按钮（数据权限） */\n    submitDataScope: function() {\n      if (this.form.roleId !== undefined) {\n        this.form.deptIds = this.getDeptAllCheckedKeys()\n        dataScope(this.form).then(response => {\n          this.msgSuccess('修改成功')\n          this.openDataScope = false\n          this.getList()\n        })\n      }\n    },\n    /** 删除按钮操作 */\n    handleDelete(row) {\n      const roleIds = row.roleId || this.ids\n      this.$confirm('是否确认删除角色编号为\"' + roleIds + '\"的数据项?', '警告', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(function() {\n        return delRole(roleIds)\n      }).then(() => {\n        this.getList()\n        this.msgSuccess('删除成功')\n      }).catch(() => {})\n    },\n    /** 导出按钮操作 */\n    handleExport() {\n      const queryParams = this.queryParams\n      this.$confirm('是否确认导出所有角色数据项?', '警告', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        this.exportLoading = true\n        return exportRole(queryParams)\n      }).then(response => {\n        this.download(response.msg)\n        this.exportLoading = false\n      }).catch(() => {})\n    }\n  }\n}\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmfile":"index.vue","sourceRoot":"src/views/system/role","sourcesContent":["<template>\n  <div class=\"app-container\">\n    <el-form v-show=\"showSearch\" ref=\"queryForm\" :model=\"queryParams\" :inline=\"true\">\n      <el-form-item label=\"角色名称\" prop=\"roleName\">\n        <el-input\n          v-model=\"queryParams.roleName\"\n          placeholder=\"请输入角色名称\"\n          clearable\n          style=\"width: 170px\"\n          @keyup.enter.native=\"handleQuery\"\n        />\n      </el-form-item>\n      <!-- <el-form-item label=\"权限字符\" prop=\"roleKey\">\n        <el-input\n          v-model=\"queryParams.roleKey\"\n          placeholder=\"请输入权限字符\"\n          clearable\n          style=\"width: 170px\"\n          @keyup.enter.native=\"handleQuery\"\n        />\n      </el-form-item> -->\n      <!-- <el-form-item label=\"状态\" prop=\"status\">\n        <el-select\n          v-model=\"queryParams.status\"\n          placeholder=\"角色状态\"\n          clearable\n          style=\"width: 170px\"\n        >\n          <el-option\n            v-for=\"item in Object.keys(ROLE_STATUS)\"\n            :key=\"item\"\n            :label=\"ROLE_STATUS[item]\"\n            :value=\"item\"\n          />\n        </el-select>\n      </el-form-item> -->\n      <el-form-item>\n        <el-button type=\"primary\" icon=\"el-icon-search\" size=\"small\" @click=\"handleQuery\">搜索</el-button>\n        <el-button icon=\"el-icon-refresh\" size=\"small\" @click=\"resetQuery\">重置</el-button>\n      </el-form-item>\n    </el-form>\n\n    <!-- <el-row :gutter=\"10\" class=\"mb8\">\n      <el-col :span=\"1.5\">\n        <el-button\n          v-hasPermi=\"['system:role:add']\"\n          type=\"primary\"\n          plain\n          icon=\"el-icon-plus\"\n          size=\"small\"\n          @click=\"handleAdd\"\n        >新增</el-button>\n      </el-col>\n    </el-row> -->\n    <!-- <el-col :span=\"1.5\">\n        <el-button\n          v-hasPermi=\"['system:role:edit']\"\n          type=\"success\"\n          plain\n          icon=\"el-icon-edit\"\n          size=\"smal\"\n          :disabled=\"single\"\n          @click=\"handleUpdate\"\n        >修改</el-button>\n      </el-col> -->\n    <!-- <el-col :span=\"1.5\">\n        <el-button\n          v-hasPermi=\"['system:role:remove']\"\n          type=\"danger\"\n          plain\n          icon=\"el-icon-delete\"\n          size=\"small\"\n          :disabled=\"multiple\"\n          @click=\"handleDelete\"\n        >删除</el-button>\n      </el-col> -->\n    <!-- <right-toolbar :show-search.sync=\"showSearch\" @queryTable=\"getList\" />\n    </el-row>-->\n\n    <el-table v-loading=\"loading\" :data=\"roleList\" @selection-change=\"handleSelectionChange\">\n      <el-table-column type=\"index\" width=\"55\" label=\"序号\" align=\"center\" />\n      <!-- <el-table-column label=\"角色编号\" prop=\"roleId\" width=\"120\" align=\"center\" /> -->\n      <el-table-column label=\"角色名称\" prop=\"roleName\" sortable align=\"center\" />\n      <!-- <el-table-column label=\"权限字符\" prop=\"roleKey\" align=\"center\" /> -->\n      <!-- <el-table-column label=\"显示顺序\" prop=\"roleSort\" width=\"100\" /> -->\n      <!-- <el-table-column key=\"status\" label=\"状态\" align=\"center\">\n        <template slot-scope=\"scope\">\n          <el-tag :type=\"scope.row.status?'success':'danger'\">{{ scope.row.status?'正常':'停用' }}</el-tag>\n        </template>\n      </el-table-column> -->\n      <el-table-column label=\"创建日期\" align=\"center\" prop=\"createTime\" width=\"180\">\n        <template slot-scope=\"scope\">\n          <span>{{ parseTime(scope.row.createTime, '{y}-{m}-{d}') }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"操作\" align=\"center\" class-name=\"small-padding fixed-width\">\n        <template v-if=\"scope.row.roleId !== 1\" slot-scope=\"scope\">\n          <!-- <el-button\n            v-hasPermi=\"['system:role:menu']\"\n            size=\"mini\"\n            type=\"text\"\n            icon=\"el-icon-circle-check\"\n            @click=\"handleDataScope(scope.row)\"\n          >菜单权限</el-button> -->\n          <el-button\n            v-hasPermi=\"['system:role:edit']\"\n            size=\"mini\"\n            type=\"text\"\n            icon=\"el-icon-edit\"\n            @click=\"handleUpdate(scope.row)\"\n          >修改</el-button>\n          <!-- <el-button\n            v-hasPermi=\"['system:role:remove']\"\n            size=\"mini\"\n            type=\"text\"\n            icon=\"el-icon-delete\"\n            @click=\"handleDelete(scope.row)\"\n          >删除</el-button> -->\n\n        </template>\n      </el-table-column>\n    </el-table>\n\n    <pagination\n      v-show=\"total>0\"\n      :total=\"total\"\n      :page.sync=\"queryParams.pageNumber\"\n      :limit.sync=\"queryParams.pageSize\"\n      @pagination=\"getList\"\n    />\n\n    <!-- 添加或修改角色配置对话框 -->\n    <el-dialog :title=\"title\" :visible.sync=\"open\" width=\"500px\" append-to-body>\n      <el-form ref=\"form\" :model=\"form\" :rules=\"rules\" label-width=\"100px\">\n        <el-form-item label=\"角色名称\" prop=\"roleName\">\n          <el-input v-model=\"form.roleName\" placeholder=\"请输入角色名称\" disabled />\n        </el-form-item>\n        <!-- <el-form-item label=\"权限字符\" prop=\"roleKey\">\n          <span slot=\"label\">\n            权限字符\n          </span>\n          <el-input v-model=\"form.roleKey\" placeholder=\"请输入权限字符\" />\n        </el-form-item> -->\n        <!-- <el-form-item label=\"角色顺序\" prop=\"roleSort\">\n          <el-input-number v-model=\"form.roleSort\" controls-position=\"right\" :min=\"0\" style=\"width: 200px;\" />\n        </el-form-item> -->\n        <el-form-item label=\"数据权限\">\n          <el-select v-model=\"form.dataScope\" style=\"width: 200px;\">\n            <el-option\n              v-for=\"item in Object.keys(AUTH_STATUS)\"\n              :key=\"item\"\n              :label=\"AUTH_STATUS[item]\"\n              :value=\"item\"\n            />\n          </el-select>\n        </el-form-item>\n        <!-- <el-form-item label=\"状态\">\n          <el-radio-group v-model=\"form.status\">\n            <el-radio\n              v-for=\"item in Object.keys(ROLE_STATUS)\"\n              :key=\"item\"\n              :label=\"item\"\n            >{{ ROLE_STATUS[item] }}</el-radio>\n          </el-radio-group>\n        </el-form-item> -->\n\n        <el-form-item label=\"菜单权限\">\n          <el-checkbox v-model=\"menuNodeAll\" @change=\"handleCheckedTreeNodeAll($event, 'menu')\">全选/全不选</el-checkbox>\n\n          <el-checkbox v-model=\"menuCheckStrictly\" @change=\"handleCheckedTreeConnect($event, 'menu')\">父子联动</el-checkbox>\n          <el-tree\n            ref=\"menu\"\n            class=\"tree-border\"\n            :data=\"menuOptions\"\n            show-checkbox\n            node-key=\"id\"\n            :check-strictly=\"!menuCheckStrictly\"\n            empty-text=\"加载中，请稍后\"\n            :props=\"defaultProps\"\n          />\n        </el-form-item>\n        <el-form-item label=\"备注\">\n          <el-input v-model=\"form.remark\" type=\"textarea\" placeholder=\"请输入内容\" />\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button type=\"primary\" @click=\"submitForm\">确 定</el-button>\n        <el-button @click=\"cancel\">取 消</el-button>\n      </div>\n    </el-dialog>\n\n  </div>\n</template>\n\n<script>\nimport { listRole, getRole, delRole, addRole, updateRole, exportRole, dataScope, changeRoleStatus } from '@/api/system/role'\nimport { menuTreeselect, roleMenuTreeselect } from '@/api/system/menu'\n// import { roleMenuTreeselect } from '@/api/system/dept'\n\nimport Pagination from '@/components/Pagination' // Secondary package based on el-pagination\nconst ROLE_STATUS = {\n  '0': '正常',\n  '1': '停用'\n}\nconst AUTH_STATUS = {\n  '1': '所有数据权限',\n  // '2': '本部门数据权限',\n  '3': '本部门及以下数据权限',\n  '4': '仅本人数据权限'\n}\nexport default {\n  name: 'Role',\n  components: { Pagination },\n  data() {\n    return {\n      ROLE_STATUS,\n      AUTH_STATUS,\n      // 遮罩层\n      loading: true,\n      // 导出遮罩层\n      exportLoading: false,\n      // 选中数组\n      ids: [],\n      // 非单个禁用\n      single: true,\n      // 非多个禁用\n      multiple: true,\n      // 显示搜索条件\n      showSearch: true,\n      // 总条数\n      total: 0,\n      // 角色表格数据\n      roleList: [],\n      // 弹出层标题\n      title: '',\n      // 是否显示弹出层\n      open: false,\n      // 是否显示弹出层（数据权限）\n      openDataScope: false,\n      menuNodeAll: false,\n\n      // 菜单列表\n      menuOptions: [],\n      // 部门列表\n      deptOptions: [],\n      // 选择控制\n      menuCheckStrictly: true,\n      // 查询参数\n      queryParams: {\n        pageNumber: 1,\n        pageSize: 20,\n        roleName: '',\n        roleKey: '',\n        status: ''\n      },\n      // 表单参数\n      form: {},\n      defaultProps: {\n        children: 'children',\n        label: 'label'\n      },\n      // 表单校验\n      rules: {\n        roleName: [\n          { required: true, message: '角色名称不能为空', trigger: 'blur' }\n        ],\n        roleKey: [\n          { required: true, message: '权限字符不能为空', trigger: 'blur' }\n        ],\n        roleSort: [\n          { required: true, message: '角色顺序不能为空', trigger: 'blur' }\n        ]\n      }\n    }\n  },\n  created() {\n    this.getList()\n  },\n  methods: {\n    /** 查询角色列表 */\n    getList() {\n      this.loading = true\n      listRole(this.queryParams).then(\n        response => {\n          this.roleList = response.result.records || []\n          this.total = response.result.total\n          this.loading = false\n        }\n      ).catch(() => {\n        this.loading = false\n      })\n    },\n    /** 查询菜单树结构 */\n    getMenuTreeselect() {\n      menuTreeselect().then(response => {\n        this.menuOptions = response.result\n      })\n    },\n    /** 查询部门树结构 */\n    getDeptTreeselect() {\n      // deptTreeselect().then(response => {\n      //   this.deptOptions = response.data\n      // })\n    },\n    // 所有菜单节点数据\n    getMenuAllCheckedKeys() {\n      // 目前被选中的菜单节点\n      const checkedKeys = this.$refs.menu.getCheckedKeys()\n      // 半选中的菜单节点\n      const halfCheckedKeys = this.$refs.menu.getHalfCheckedKeys()\n      checkedKeys.unshift.apply(checkedKeys, halfCheckedKeys)\n      return checkedKeys\n    },\n    // 所有部门节点数据\n    getDeptAllCheckedKeys() {\n      // 目前被选中的部门节点\n      const checkedKeys = this.$refs.dept.getCheckedKeys()\n      // 半选中的部门节点\n      const halfCheckedKeys = this.$refs.dept.getHalfCheckedKeys()\n      checkedKeys.unshift.apply(checkedKeys, halfCheckedKeys)\n      return checkedKeys\n    },\n    /** 根据角色ID查询菜单树结构 */\n    getRoleMenuTreeselect(roleId) {\n      return roleMenuTreeselect(roleId).then(response => {\n        this.menuOptions = response.result.treeSelect\n        return response.result\n      })\n    },\n    /** 根据角色ID查询部门树结构 */\n    getRoleDeptTreeselect(roleId) {\n      // return roleDeptTreeselect(roleId).then(response => {\n      //   this.deptOptions = response.depts\n      //   return response\n      // })\n    },\n    // 角色状态修改\n    handleStatusChange(row) {\n      const text = row.status === '0' ? '启用' : '停用'\n      this.$confirm('确认要\"' + text + '\"\"' + row.roleName + '\"角色吗?', '警告', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(function() {\n        return changeRoleStatus(row.roleId, row.status)\n      }).then(() => {\n        this.msgSuccess(text + '成功')\n      }).catch(function() {\n        row.status = row.status === '0' ? '1' : '0'\n      })\n    },\n    // 取消按钮\n    cancel() {\n      this.open = false\n      this.reset()\n    },\n    // 取消按钮（数据权限）\n    cancelDataScope() {\n      this.openDataScope = false\n      this.reset()\n    },\n    // 表单重置\n    reset() {\n      if (this.$refs.menu !== undefined) {\n        this.$refs.menu.setCheckedKeys([])\n      }\n      this.menuNodeAll = false\n      this.form = {\n        roleId: undefined,\n        roleName: '',\n        roleKey: '',\n        roleSort: 0,\n        status: '0',\n        menuIds: [],\n        dataScope: '',\n        remark: ''\n      }\n      this.resetForm('form')\n    },\n    /** 搜索按钮操作 */\n    handleQuery() {\n      this.queryParams.pageNumber = 1\n      this.getList()\n    },\n    /** 重置按钮操作 */\n    resetQuery() {\n      this.dateRange = []\n      this.resetForm('queryForm')\n      this.handleQuery()\n    },\n    // 多选框选中数据\n    handleSelectionChange(selection) {\n      this.ids = selection.map(item => item.roleId)\n      this.single = selection.length !== 1\n      this.multiple = !selection.length\n    },\n    // 更多操作触发\n    handleCommand(command, row) {\n      switch (command) {\n        case 'handleDataScope':\n          this.handleDataScope(row)\n          break\n        case 'handleAuthUser':\n          this.handleAuthUser(row)\n          break\n        default:\n          break\n      }\n    },\n    // 树权限（展开/折叠）\n    handleCheckedTreeExpand(value, type) {\n      if (type === 'menu') {\n        const treeList = this.menuOptions\n        for (let i = 0; i < treeList.length; i++) {\n          this.$refs.menu.store.nodesMap[treeList[i].id].expanded = value\n        }\n      } else if (type === 'dept') {\n        const treeList = this.deptOptions\n        for (let i = 0; i < treeList.length; i++) {\n          this.$refs.dept.store.nodesMap[treeList[i].id].expanded = value\n        }\n      }\n    },\n    // 树权限（全选/全不选）\n    handleCheckedTreeNodeAll(value, type) {\n      if (type === 'menu') {\n        this.$refs.menu.setCheckedNodes(value ? this.menuOptions : [])\n      } else if (type === 'dept') {\n        this.$refs.dept.setCheckedNodes(value ? this.deptOptions : [])\n      }\n    },\n    // 树权限（父子联动）\n    handleCheckedTreeConnect(value, type) {\n      this.menuCheckStrictly = !!value\n    },\n    /** 新增按钮操作 */\n    handleAdd() {\n      this.reset()\n      this.getMenuTreeselect()\n      this.open = true\n      this.title = '添加角色'\n    },\n    /** 修改按钮操作 */\n    handleUpdate(row) {\n      this.reset()\n      const roleId = row.roleId || this.ids\n      const roleMenu = this.getRoleMenuTreeselect(roleId)\n      getRole(roleId).then(response => {\n        this.form = response.result\n        this.$delete(this.form, 'createTime')\n        this.$delete(this.form, 'updateTime')\n        this.$delete(this.form, 'delFlag')\n        this.open = true\n        this.$nextTick(() => {\n          roleMenu.then(res => {\n            const checkedKeys = res.checkedKeys\n            checkedKeys.forEach((v) => {\n              this.$nextTick(() => {\n                this.$refs.menu.setChecked(v, true, false)\n              })\n            })\n          })\n        })\n        this.title = '修改角色'\n      })\n    },\n    /** 选择角色权限范围触发 */\n    dataScopeSelectChange(value) {\n      if (value !== '2') {\n        this.$refs.dept.setCheckedKeys([])\n      }\n    },\n    /** 分配数据权限操作 */\n    handleDataScope(row) {\n      this.reset()\n      const roleDeptTreeselect = this.getRoleDeptTreeselect(row.roleId)\n      getRole(row.roleId).then(response => {\n        this.form = response.data\n        this.openDataScope = true\n        this.$nextTick(() => {\n          roleDeptTreeselect.then(res => {\n            this.$refs.dept.setCheckedKeys(res.checkedKeys)\n          })\n        })\n        this.title = '分配数据权限'\n      })\n    },\n    /** 分配用户操作 */\n    handleAuthUser: function(row) {\n      const roleId = row.roleId\n      this.$router.push('/auth/user/' + roleId)\n    },\n    /** 提交按钮 */\n    submitForm: function() {\n      this.$refs['form'].validate(valid => {\n        if (valid) {\n          if (this.form.roleId !== undefined) {\n            this.form.menuIds = this.getMenuAllCheckedKeys()\n            updateRole(this.form).then(response => {\n              this.msgSuccess('修改成功')\n              this.open = false\n              this.getList()\n            })\n          } else {\n            this.form.menuIds = this.getMenuAllCheckedKeys()\n            addRole(this.form).then(response => {\n              this.msgSuccess('新增成功')\n              this.open = false\n              this.getList()\n            })\n          }\n        }\n      })\n    },\n    /** 提交按钮（数据权限） */\n    submitDataScope: function() {\n      if (this.form.roleId !== undefined) {\n        this.form.deptIds = this.getDeptAllCheckedKeys()\n        dataScope(this.form).then(response => {\n          this.msgSuccess('修改成功')\n          this.openDataScope = false\n          this.getList()\n        })\n      }\n    },\n    /** 删除按钮操作 */\n    handleDelete(row) {\n      const roleIds = row.roleId || this.ids\n      this.$confirm('是否确认删除角色编号为\"' + roleIds + '\"的数据项?', '警告', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(function() {\n        return delRole(roleIds)\n      }).then(() => {\n        this.getList()\n        this.msgSuccess('删除成功')\n      }).catch(() => {})\n    },\n    /** 导出按钮操作 */\n    handleExport() {\n      const queryParams = this.queryParams\n      this.$confirm('是否确认导出所有角色数据项?', '警告', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        this.exportLoading = true\n        return exportRole(queryParams)\n      }).then(response => {\n        this.download(response.msg)\n        this.exportLoading = false\n      }).catch(() => {})\n    }\n  }\n}\n</script>\n"]}]}